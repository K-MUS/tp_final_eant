)
)
#------------------------------------------------------------
# Predict
#------------------------------------------------------------
tab_predict <- tabItem(tabName = "predict",
box(
title = "Relevant Parameters", width = 2, status = "primary", solidHeader = TRUE,
#age
sliderInput("i_age", "Age?", min = 14, max = 100, value = 38),
#travel
selectInput("i_travel", "Travel Frequency",
choices = list("Non-Travel" = "Non-Travel",
"Rarely" = "Travel_Rarely",
"Frequently" = "Travel_Frequently"),
selected = 1),
#monthlyIncome
sliderInput("i_monthly_income", "Monthly Income", min = 1000, max = 25000, value = 15000),
#JobRole
selectInput("i_role", "Job Role",
choices = list("Sales Executive" = "Sales Executive",
"Research Scientist" = "Research Scientist",
"Laboratory Technician" = "Laboratory Technician",
"Manufacturing Director" = "Manufacturing Director",
"Healthcare Representative" = "Healthcare Representative",
"Manager" = "Manager",
"Sales Representative" = "Sales Representative",
"Research Director" = "Research Director",
"Human Resources" = "Human Resource"
),
selected = 3),
#JobSatisfaction
selectInput("i_job_satisfaction", "Job Satisfaction",
choices = list("Low" = 1,
"Medium"  = 2,
"High" = 3,
"Very High"   = 4),
selected = 2),
#Overtime
selectInput("i_overtime", "Overtime",
choices = list("No" = "No",
"Yes"  = "Yes"),
selected = 2),
#StockOptionLvl
sliderInput("i_stock", "Stock Option level", min = 0, max = 3, value = 1),
#YearsCompany
sliderInput("i_years_company", "Years at Company", min = 0, max = 40, value = 6),
#Years Current Role
sliderInput("i_years_role", "Years at Current Role", min = 0, max = 40, value = 2),
#Years Same Manager
sliderInput("i_years_manager", "Years with Current Manager", min = 0, max = 40, value = 2),
),
column(width = 2,
box(
title = "Less Relevant Parameters", width = NULL, status = "primary", solidHeader = TRUE,
#department
selectInput("i_department", "Department",
choices = list("Human Resources" = "Human Resources",
"Research & Development" = "Research & Development",
"Sales" = "Sales"),
selected = 3),
#Distance from home
sliderInput("i_distance", "Distance from home", min = 1, max = 30, value = 15),
#Education
selectInput("i_education", "Education",
choices = list("Below College" = 1,
"College"  = 2,
"Bachelor" = 3,
"Master"   = 4,
"Doctor"   = 5),
selected = 3),
#EnviromentSatisfaction
selectInput("i_env_satisfaction", "Enviroment Satisfaction",
choices = list("Low" = 1,
"Medium"  = 2,
"High" = 3,
"Very High"   = 4),
selected = 2),
# #JobInvolvement
# selectInput("i_involvement", "Job Involement",
#             choices = list("Low" = 1,
#                            "Medium"  = 2,
#                            "High" = 3,
#                            "Very High"   = 4),
#             selected = 2),
#Gender
selectInput("i_gender", "Gender",
choices = list("Female" = "Female",
"Male"  = "Male"),
selected = 2),
#NumCompanyWorked
sliderInput("i_companyworked", "No Company Worked", min = 1, max = 10, value = 2),
#TotalWorkingYears
sliderInput("i_totalyworked", "Total Working Years", min = 0, max = 40, value = 18),
#Training
sliderInput("i_training", "Training Times Last Year", min = 0, max = 10, value = 2),
),
box(width = NULL,align="center",
actionButton("predict", label = "Predict"),
)
),
verbatimTextOutput("console_text"),
valueBoxOutput("PredictBox")
# box(
#   title = "Result", width = 8, status = "primary", solidHeader = TRUE,
#   h2("Results")
# )
)
#------------------------------------------------------------
# Datos
#------------------------------------------------------------
tab_datos <- tabItem(tabName = "datos",
fluidRow(
# column(
box(
title = "Data", width = 12, status = "primary", solidHeader = TRUE,
DT::DTOutput("original_datos2")
)
# ,width=12)
)
)
#Libraries
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(forcats) #sort ggplot by amount
library(cowplot) #Themes and tools for ggplot
library(ggthemes)#themes for ggplot
library(rpart)   #Decision Tree
library(rpart.plot)   #Decision Tree - Plots
library(caret)   #Split data
library(corrplot)
library(DT)      #Display Table
library(plotly)      #Display Table
library(GGally)
source('ui.R', local = TRUE)
source('server.R')
#Data
original_df <- read.csv("Data/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df <- original_df
colnames(df)[1] = "Age"
df$StandardHours<-NULL
df$PerformanceRating<-NULL
df$Over18<-NULL
df$EmployeeCount<-NULL
df$JobLevel<-NULL
df$DailyRate<-NULL
df$HourlyRate<-NULL
df$DailyRate<-NULL
df$MonthlyRate<-NULL
df$PercentSalaryHike<-NULL
df$EmployeeNumber<-NULL
df$MaritalStatus<-NULL
df$EducationField<-NULL
df$RelationshipSatisfaction<-NULL
df$WorkLifeBalance<-NULL
df$YearsSinceLastPromotion<-NULL
df$JobInvolvement<-NULL
df_num <- df
df_num$Attrition= as.integer(as.factor(df_num$Attrition))-1
df_num$BusinessTravel= as.integer(as.factor(df_num$BusinessTravel))
df_num$Department= as.integer(as.factor(df_num$Department))
df_num$Gender= as.integer(as.factor(df_num$Gender))
df_num$JobRole= as.integer(as.factor(df_num$JobRole))
#df_num$MaritalStatus= as.integer(as.factor(df_num$MaritalStatus))
df_num$OverTime= as.integer(as.factor(df_num$OverTime))
#df_num$EducationField= as.integer(as.factor(df_num$EducationField))
set.seed(666)
# Splitting our data
trainIndex <- createDataPartition(df$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
test <- df[-trainIndex,]
case1 <- test[1,]
model <- rpart(Attrition ~ ., data=train)
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
summary(model)
pred <- predict(model, newdata = test[1,], type = "prob")
pred
# Complicated DecisionTree, Is there a way to determine variable importance?
var_imp <- data.frame(model$variable.importance)
var_imp$features <- rownames(var_imp)
var_imp <- var_imp[, c(2, 1)]
var_imp$importance <- round(var_imp$model.variable.importance, 2)
var_imp$model.variable.importance <- NULL
unique(df$Department)
m
colorCount <- length(unique(var_imp$features))
feature_importance <- var_imp
ggplot(feature_importance, aes(x=reorder(features, importance), y=importance, fill=features)) +
geom_bar(stat='identity') +
coord_flip() +
geom_label(aes(label=paste0(importance, "%")), colour = "white", fontface = "italic", hjust=0.6) +
theme_minimal()
# theme(legend.position="none", strip.background = element_blank(), strip.text.x = element_blank(),
#         plot.title=element_text(hjust=0.5, color="white"), plot.subtitle=element_text(color="white"), plot.background=element_rect(fill="#0D7680"),
#         axis.text.x=element_text(colour="white"), axis.text.y=element_text(colour="white"),
#         axis.title=element_text(colour="white"),
#         legend.background = element_rect(fill="#FFF9F5",
#                                          size=0.5, linetype="solid",
#                                          colour ="black"))
shinyApp(
ui = UI,
server = SERVER
)
values <- reactiveValues(Age                   = input$i_age,
BusinessTravel        = input$i_travel,
Department            = input$i_department,
DistanceFromHome      = input$i_distance,
Education             = input$i_education,
EnvironmentSatisfaction = input$i_env_satisfaction,
Gender                = input$i_gender,
JobRole               = input$i_role,
MonthlyIncome         = input$i_monthly_income,
NumCompanyWorked      = input$i_companyworked,
OverTime              = input$i_overtime,
StockOptionLevel      = input$i_stock,
TotalWorkingYears     = input$i_totalyworked,
TrainingTimesLastYear = input$i_training,
YearsAtCompany        = input$i_years_company,
YearsInCurrentRole    = input$i_years_role,
YearsWithCurrManager  = input$i_years_manager)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
library(shiny); runApp('main.R')
library(shiny); runApp('main.R')
library(shiny); runApp('main.R')
runApp('main.R')
struct(train)
str(train)
library(shiny); runApp('main.R')
str(train)
model <- rpart(Attrition ~ ., data=train)
factor(train$BusinessTravel)
str(train$BusinessTravel)
levels(train$BusinessTravel)
train$BusinessTravel
levels(train$BusinessTravel)
runApp('main.R')
#Data
original_df <- read.csv("Data/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df <- original_df
colnames(df)[1] = "Age"
df$StandardHours<-NULL
df$PerformanceRating<-NULL
df$Over18<-NULL
df$EmployeeCount<-NULL
df$JobLevel<-NULL
df$DailyRate<-NULL
df$HourlyRate<-NULL
df$DailyRate<-NULL
df$MonthlyRate<-NULL
df$PercentSalaryHike<-NULL
df$EmployeeNumber<-NULL
df$MaritalStatus<-NULL
df$EducationField<-NULL
df$RelationshipSatisfaction<-NULL
df$WorkLifeBalance<-NULL
df$YearsSinceLastPromotion<-NULL
df$JobInvolvement<-NULL
# Splitting our data
trainIndex <- createDataPartition(df$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
test <- df[-trainIndex,]
model <- rpart(Attrition ~ ., data=train)
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
# Splitting our data
trainIndex <- createDataPartition(df_num$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
# Splitting our data
trainIndex <- createDataPartition(df_num$Attrition, p=0.8,
list=FALSE, times=1)
train <- df_num[trainIndex,]
test <- df_num[-trainIndex,]
model <- rpart(Attrition ~ ., data=train)
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
summary(model)
text(model, all=TRUE, use.n=TRUE)
runApp('main.R')
#Data
original_df <- read.csv("Data/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df <- original_df
colnames(df)[1] = "Age"
df$StandardHours<-NULL
df$PerformanceRating<-NULL
df$Over18<-NULL
df$EmployeeCount<-NULL
df$JobLevel<-NULL
df$DailyRate<-NULL
df$HourlyRate<-NULL
df$DailyRate<-NULL
df$MonthlyRate<-NULL
df$PercentSalaryHike<-NULL
df$EmployeeNumber<-NULL
df$MaritalStatus<-NULL
df$EducationField<-NULL
df$RelationshipSatisfaction<-NULL
df$WorkLifeBalance<-NULL
df$YearsSinceLastPromotion<-NULL
df$JobInvolvement<-NULL
# Splitting our data
trainIndex <- createDataPartition(df$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
test <- df[-trainIndex,]
model <- rpart(Attrition ~ ., data=train)
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
runApp('main.R')
str(BusinessTravel)
str(BusinessTravel)
runApp('main.R')
str(test)
test
test
view(test)
str(test)
runApp('main.R')
runApp('main.R')
library(shiny); runApp('main.R')
pred_case
runApp('main.R')
str(test)
runApp('main.R')
BusinessTravel
str(BusinessTravel)
runApp('main.R')
str(test)
test
test1 <- as.data.frame(test)
test1
str(test1)
runApp('main.R')
library(shiny); runApp('main.R')
str(Department)
str(test)
test
runApp()
runApp('main.R')
test
str(test)
str(test)
str(train)
runApp('main.R')
runApp('main.R')
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
pred <- predict(model, newdata = test[1,], type = "class")
pred
levels(pred)
pred <- predict(model, newdata = test[5,], type = "class")
pred
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
runApp('main.R')
pred
pred
summary(pred)
pred <- predict(model, newdata = test[5,], type = "class")
pred <- predict(model, newdata = test[5,], type = "prob")
View(pred)
pred
View(pred)
summary(pred)
pred <- predict(model, newdata = test[5,], type = "vector")
pred
pred <- predict(model, newdata = test[5,], type = "class")
pred
library(shiny); runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
model <- rpart(Attrition ~ ., data=train)
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
#Data
original_df <- read.csv("Data/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df <- original_df
colnames(df)[1] = "Age"
df$StandardHours<-NULL
df$PerformanceRating<-NULL
df$Over18<-NULL
df$EmployeeCount<-NULL
df$JobLevel<-NULL
df$DailyRate<-NULL
df$HourlyRate<-NULL
df$DailyRate<-NULL
df$MonthlyRate<-NULL
df$PercentSalaryHike<-NULL
df$EmployeeNumber<-NULL
df$MaritalStatus<-NULL
df$EducationField<-NULL
df$RelationshipSatisfaction<-NULL
df$WorkLifeBalance<-NULL
df$YearsSinceLastPromotion<-NULL
df$JobInvolvement<-NULL
set.seed(666)
# Splitting our data
trainIndex <- createDataPartition(df$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
test <- df[-trainIndex,]
case1 <- test[1,]
str(train)
str(train$BusinessTravel)
levels(train$BusinessTravel)
model <- rpart(Attrition ~ ., data=train)
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
# Splitting our data
trainIndex <- createDataPartition(df$Attrition, p=0.8,
list=FALSE, times=1)
train <- df[trainIndex,]
test <- df[-trainIndex,]
model <- rpart(Attrition ~ ., data=train)
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
runApp('main.R')
View(train)
model
View(model)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
summary(model)
model
# model <- rpart(Attrition ~ ., data=train)
model <- rpart(Attrition ~ ., data=train,control=rpart.control(minsplit=10,cp=0.001))
model
plot(model, uniform=TRUE, branch=0.6, margin=0.05)
text(model, all=TRUE, use.n=TRUE)
model
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
View(df)
runApp('main.R')
runApp('main.R')
library("ROCR")
install.packages("ROCR")
library("ROCR")
View(test)
predict = predict(model, newdata = test, type = "prob")[,2]
prediction = prediction(predict, Test$n.use)
library("ROCR")
View(test)
predict = predict(model, newdata = test, type = "prob")[,2]
prediction = prediction(predict, test$Attrition)
plot(performance(prediction, "tpr", "fpr"))
confusionMatrix(pred,test$Attrition)
conf_mat = predict(model, newdata = test, type = "class")
confusionMatrix(conf_mat,test$Attrition)
runApp('main.R')
library("ROCR")
install.packages("ROCR")
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
conf_mat_info
conf_mat = predict(model, newdata = test, type = "class")
conf_mat_info <- confusionMatrix(conf_mat,test$Attrition)
conf_mat_info
runApp('main.R')
sumary(conf_mat_info)
summary(conf_mat_info)
conf_mat = predict(model, newdata = test, type = "class")
conf_mat_info <- confusionMatrix(conf_mat,test$Attrition)
conf_mat_info
runApp('main.R')
runApp('main.R')
conf_mat = predict(model, newdata = test, type = "class")
runApp('main.R')
runApp('main.R')
runApp('main.R')
conf_mat = predict(model, newdata = test, type = "class")
conf_mat_info <- confusionMatrix(conf_mat,test$Attrition)
conf_mat_info
runApp('main.R')
runApp('main.R')
runApp('main.R')
